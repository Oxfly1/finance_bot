from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING, CHOOSING_CATEGORY, TYPING_AMOUNT = range(3)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboard = [
    ["‚ûï –î–æ—Ö—ñ–¥", "‚ûñ –í–∏—Ç—Ä–∞—Ç–∞"],
    ["üìä –ë–∞–ª–∞–Ω—Å"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
income_categories = ["üíº –ó–∞—Ä–ø–ª–∞—Ç–∞", "üéÅ –ü–æ–¥–∞—Ä—É–Ω–æ–∫", "üè¶ –Ü–Ω—à–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
expense_categories = ["ü•ó –á–∂–∞", "üè† –û—Ä–µ–Ω–¥–∞", "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üéÆ –†–æ–∑–≤–∞–≥–∏", "üì¶ –Ü–Ω—à–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]

# –°—Ö–æ–≤–∏—â–µ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_state = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é ‚¨áÔ∏è",
        reply_markup=markup
    )
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥—ñ—ó
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "‚ûï –î–æ—Ö—ñ–¥":
        user_state[user_id] = {"type": "income"}
        reply_markup = ReplyKeyboardMarkup(
            [[c] for c in income_categories],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ—Ö–æ–¥—É:", reply_markup=reply_markup)
        return CHOOSING_CATEGORY

    elif text == "‚ûñ –í–∏—Ç—Ä–∞—Ç–∞":
        user_state[user_id] = {"type": "expense"}
        reply_markup = ReplyKeyboardMarkup(
            [[c] for c in expense_categories],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç–∏:", reply_markup=reply_markup)
        return CHOOSING_CATEGORY

    elif text == "üìä –ë–∞–ª–∞–Ω—Å":
        balance = context.bot_data.get("balance", 0)
        await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω")
        return CHOOSING

    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.")
        return CHOOSING

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    user_id = update.effective_user.id

    if category == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚¨áÔ∏è", reply_markup=markup)
        return CHOOSING

    user_data = user_state.get(user_id, {})
    user_data["category"] = category
    user_state[user_id] = user_data

    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 150):", reply_markup=ReplyKeyboardRemove())
    return TYPING_AMOUNT

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 150")
        return TYPING_AMOUNT

    data = user_state.get(user_id)
    tx_type = data.get("type")
    category = data.get("category")
    balance = context.bot_data.get("balance", 0)

    if tx_type == "income":
        balance += amount
        context.bot_data.setdefault("transactions", []).append({
            "—Ç–∏–ø": "–¥–æ—Ö—ñ–¥",
            "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è": category,
            "—Å—É–º–∞": amount
        })
        await update.message.reply_text(f"‚úÖ –î–æ—Ö—ñ–¥ {amount} –≥—Ä–Ω ({category}) –¥–æ–¥–∞–Ω–æ.")

    elif tx_type == "expense":
        balance -= amount
        context.bot_data.setdefault("transactions", []).append({
            "—Ç–∏–ø": "–≤–∏—Ç—Ä–∞—Ç–∞",
            "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è": category,
            "—Å—É–º–∞": amount
        })
        await update.message.reply_text(f"üí∏ –í–∏—Ç—Ä–∞—Ç–∞ {amount} –≥—Ä–Ω ({category}) –¥–æ–¥–∞–Ω–∞.")

    context.bot_data["balance"] = balance
    await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –≥—Ä–Ω", reply_markup=markup)
    return CHOOSING

# –û–±—Ä–æ–±–∫–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=markup)
    return CHOOSING

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token("TELEGRAM_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            CHOOSING_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)],
            TYPING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
